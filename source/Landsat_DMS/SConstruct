#!python

import os
import platform
import subprocess


p = subprocess.Popen(["conda", "info", "--root"],stdout=subprocess.PIPE)
out = p.communicate()
condaPath = out[0][:-1]
base = os.path.abspath(os.path.join(os.getcwd(),os.pardir,os.pardir))
sourcePath = os.path.join(base,'source')
binPath = os.path.join(condaPath,'bin')

if not platform.system()=='Linux':
    env = Environment(CC = os.path.join(binPath,'gcc'))
else:
    env = Environment(CC = 'gcc')
    
env.Append(CCFLAGS = ['-static','-g','-O3'])
#env.Append(CCFLAGS = ['-static','-ffloat-store','-O3','-DVerbOpt',
#'-g', '-Wall', '-O0'])
env.Append(LIBPATH = [os.path.join(sourcePath,'lib')])
env.Append(CPPPATH = [os.path.join(sourcePath,'include')])
env.Append(LIBS = ['geotiff','tiff','z','jpeg','m','lzma'])

combineModels = env.Program(target='combine_models', source=['utility.c','sensor.c','combine_models.c'])
getSamples = env.Program(target='get_samples', source=['utility.c','sensor.c','get_samples.c'])
predict_fineT = env.Program(target='predict_fineT', source=['utility.c','sensor.c','predict_fineT.c'])
env.Append(LIBS = ['m'])
th_intC2floatK = env.Program(target='th_intC2floatK', source=['th_intC2floatK.c'])

env.Install(binPath, [combineModels,getSamples,predict_fineT,th_intC2floatK])
env.Alias('install', binPath)
